<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>English Speaking Practice</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f7f9fc;
      font-family: Arial, sans-serif;
    }

    .container {
      max-width: 600px;
      margin-top: 50px;
      background-color: #fff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    h1 {
      font-size: 24px;
      font-weight: bold;
      color: #343a40;
    }

    .response-container {
      background-color: #e9ecef;
      padding: 20px;
      border-radius: 10px;
      margin-top: 20px;
    }

    .audio-player {
      margin-top: 10px;
    }
  </style>
</head>

<body>

  <div class="container">
    <h1 class="text-center mb-4">Practice Your English Speaking</h1>

    <h2>Your Speaking Topic:</h2>
    <p class="text-muted"><%= topic %></p>

    <!-- Form tải lên và ghi âm -->
    <% if (!showResult) { %>
    <form action="/analyze-audio" method="POST" enctype="multipart/form-data" class="mt-4">
      <input type="hidden" name="topic" value="<%= topic %>">
      <div class="form-group">
        <label for="audioFile">Record your voice and upload:</label>
        <input type="file" id="audioFile" name="audioFile" accept="audio/*" class="form-control" onchange="checkFile()">
      </div>

      <!-- Nút ghi âm -->
      <div class="mt-3">
        <button type="button" class="btn btn-primary" onclick="startRecording()">Start Recording</button>
        <button type="button" class="btn btn-secondary" onclick="stopRecording()" disabled>Stop Recording</button>
      </div>

      <!-- Nút gửi -->
      <div class="text-center mt-4">
        <button type="submit" class="btn btn-success btn-block" id="submitButton" disabled>Submit for Correction</button>
      </div>
    </form>
    <% } else { %>
    <!-- Nút kiểm tra bài nói khác -->
    <div class="text-center mt-4">
      <a href="/" class="btn btn-primary btn-block">Try Another Speaking Topic</a>
    </div>
    <% } %>

    <!-- Phản hồi -->
    <% if (response) { %>
    <div class="response-container mt-4">
      <h2>Correction:</h2>
      <p><strong>Topic:</strong> <%= response.topic %></p>
      <p><strong>Your Response:</strong> <%= response.transcriptText %></p>

      <input type="hidden" id="analysisText" value="<%= response.analysis %>">

      <p><strong>Rating:</strong> <span id="rating"></span></p>
      <p><strong>Analysis:</strong> <span id="analysis"></span></p>
      <p><strong>Explanation (English):</strong> <span id="explanationEnglish"></span></p>
      <p><strong>Explanation (Vietnamese):</strong> <span id="explanationVietnamese"></span></p>

      <% if (audioUrl) { %>
      <div class="audio-player">
        <audio controls>
          <source src="<%= audioUrl %>" type="audio/mpeg">
          Your browser does not support the audio element.
        </audio>
      </div>
      <% } %>
    </div>
    <% } %>
  </div>

  <script>
    // Hàm kiểm tra tệp được tải lên
    function checkFile() {
      const audioFileInput = document.getElementById('audioFile');
      const submitButton = document.getElementById('submitButton');
      submitButton.disabled = !audioFileInput.files.length;
    }

    // API Web Speech để ghi âm giọng nói
    let mediaRecorder;
    let audioChunks = [];

    function startRecording() {
      navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
        mediaRecorder = new MediaRecorder(stream);
        mediaRecorder.start();
        audioChunks = [];

        mediaRecorder.ondataavailable = event => audioChunks.push(event.data);
        mediaRecorder.onstop = () => {
          const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
          const audioFileInput = document.getElementById('audioFile');
          const file = new File([audioBlob], "recording.wav", { type: "audio/wav" });

          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          audioFileInput.files = dataTransfer.files;

          // Gọi hàm kiểm tra sau khi ghi âm để kích hoạt nút submit
          checkFile();
        };

        document.querySelector('button[onclick="startRecording()"]').disabled = true;
        document.querySelector('button[onclick="stopRecording()"]').disabled = false;
      });
    }

    function stopRecording() {
      mediaRecorder.stop();
      document.querySelector('button[onclick="startRecording()"]').disabled = false;
      document.querySelector('button[onclick="stopRecording()"]').disabled = true;
    }

    document.addEventListener("DOMContentLoaded", function () {
      const analysisText = document.getElementById("analysisText") ? document.getElementById("analysisText").value : "";
      const ratingMatch = analysisText.match(/\*\*1\. Rating:\*\*\s*([\d/]+)/);
      const analysisMatch = analysisText.match(/\*\*2\. Analysis:\*\*(.*?)\*\*3\./s);
      const explanationEnglishMatch = analysisText.match(/\*\*English:\*\*(.*?)\*\*Vietnamese:/s);
      const explanationVietnameseMatch = analysisText.match(/\*\*Vietnamese:\*\*(.*)$/s);

      document.getElementById("rating").innerText = ratingMatch ? ratingMatch[1] : "No rating provided";
      document.getElementById("analysis").innerText = analysisMatch ? analysisMatch[1].trim() : "No analysis provided";
      document.getElementById("explanationEnglish").innerText = explanationEnglishMatch ? explanationEnglishMatch[1].trim() : "No English explanation provided";
      document.getElementById("explanationVietnamese").innerText = explanationVietnameseMatch ? explanationVietnameseMatch[1].trim() : "No Vietnamese explanation provided";
    });
  </script>
</body>

</html>
